local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Kitty Kat",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Kitty Kat",
   LoadingSubtitle = "by B1RD, Pecan Pie",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local ESPTab = Window:CreateTab("ESP & Aimbot", nil)
local ESPSection = ESPTab:CreateSection("ESP")

local Toggle = ESPTab:CreateToggle({
   Name = "ESP",
   CurrentValue = false,
   Flag = "EspToggle",
   Callback = function(Value)
       local Players = game:GetService("Players")
       local RunService = game:GetService("RunService")

       local function createHighlight()
           local highlight = Instance.new("Highlight")
           highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
           highlight.FillTransparency = 1
           highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
           return highlight
       end

       local function onCharacterAdded(character)
           local highlight = createHighlight()
           highlight.Adornee = character
           highlight.Parent = character
           character.Destroying:Once(function()
               highlight:Destroy()
           end)
       end

       local function onPlayerAdded(player)
           player.CharacterAdded:Connect(onCharacterAdded)
           if player.Character then
               onCharacterAdded(player.Character)
           end
       end

       if Value then
           Players.PlayerAdded:Connect(onPlayerAdded)
           for _, player in ipairs(Players:GetPlayers()) do
               onPlayerAdded(player)
           end
       else
           for _, player in ipairs(Players:GetPlayers()) do
               if player.Character then
                   local highlight = player.Character:FindFirstChildOfClass("Highlight")
                   if highlight then
                       highlight:Destroy()
                   end
               end
           end
       end
   end,
})

local AimbotSection = ESPTab:CreateSection("AIMBOT")

local Toggle = ESPTab:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "AimbotToggle",
   Callback = function(Value)
       local Bot = script.Parent
       local Humanoid = Bot:FindFirstChild("Humanoid")
       local Head = Bot:FindFirstChild("Head")
       local Players = game:GetService("Players")
       local RunService = game:GetService("RunService")

       local MAX_TARGET_RADIUS = 150
       local UPDATE_INTERVAL = 0.2
       local DIFFICULTY = "instant"

       local settings = {
           low = {aimSpeed = 0.7, aimOffset = Vector3.new(0, math.random(-1, 2), 0)},
           less = {aimSpeed = 0.9, aimOffset = Vector3.new(0, math.random(-1, 1), 0)},
           instant = {aimSpeed = 1, aimOffset = Vector3.new(0, 0, 0)}
       }

       local currentTarget = nil
       local lastUpdate = 0

       function findNearestPlayer()
           local closestPlayer = nil
           local shortestDistance = MAX_TARGET_RADIUS

           for _, player in ipairs(Players:GetPlayers()) do
               if player.Character and player.Character ~= Bot then
                   local humanoid = player.Character:FindFirstChild("Humanoid")
                   local rootPart = player.Character:FindFirstChild("HumanoidRootPart")

                   if humanoid and humanoid.Health > 0 and rootPart then
                       local distance = (rootPart.Position - Bot.HumanoidRootPart.Position).Magnitude

                       if distance < shortestDistance then
                           local raycastParams = RaycastParams.new()
                           raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                           raycastParams.FilterDescendantsInstances = {Bot}

                           local raycastResult = workspace:Raycast(
                               Head.Position,
                               (rootPart.Position - Head.Position).Unit * MAX_TARGET_RADIUS,
                               raycastParams
                           )

                           if raycastResult and raycastResult.Instance:IsDescendantOf(player.Character) then
                               closestPlayer = rootPart
                               shortestDistance = distance
                           end
                       end
                   end
               end
           end

           return closestPlayer
       end

       function updateAim()
           if not Humanoid or Humanoid.Health <= 0 then return end

           currentTarget = findNearestPlayer()

           if currentTarget then
               local targetPosition = currentTarget.Position + settings[DIFFICULTY].aimOffset
               local direction = (targetPosition - Head.Position).Unit

               local currentLook = Head.CFrame.LookVector
               local newLook = currentLook:Lerp(direction, settings[DIFFICULTY].aimSpeed * UPDATE_INTERVAL)

               Bot:SetPrimaryPartCFrame(CFrame.lookAt(Head.Position, Head.Position + newLook))
           end
       end

       RunService.Heartbeat:Connect(function(deltaTime)
           if not Value then return end
           lastUpdate += deltaTime
           if lastUpdate >= UPDATE_INTERVAL then
               lastUpdate = 0
               updateAim()
           end
       end)

       function setDifficulty(newDifficulty)
           if settings[newDifficulty] then
               DIFFICULTY = newDifficulty
               print("Difficulty set to:", newDifficulty)
           else
               warn("Invalid difficulty level")
           end
       end
   end,
})


local MiscTab = Window:CreateTab("Misc", nil)
local MiscSection = MiscTab:CreateSection("Walkspeed")

local Slider = MiscTab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, 100},
    Increment = 1,
    Suffix = " Speed",
    CurrentValue = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed or 16,
    Flag = "WalkSpeedSlider",
    Callback = function(Value)
        local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value
        end
    end,
})

local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
if humanoid then
    Slider:Set(humanoid.WalkSpeed)
end
