Tlocal Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Kitty Kat",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Kitty Kat",
   LoadingSubtitle = "by B1RD, Pecan Pie",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local ESPTab = Window:CreateTab("PVP", nil)
local ESPSection = ESPTab:CreateSection("ESP")

local Toggle = ESPTab:CreateToggle({
   Name = "ESP",
   CurrentValue = false,
   Flag = "EspToggle",
   Callback = function(Value)
       local Players = game:GetService("Players")
       local RunService = game:GetService("RunService")

       local function createHighlight()
           local highlight = Instance.new("Highlight")
           highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
           highlight.FillTransparency = 1
           highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
           return highlight
       end

       local function onCharacterAdded(character)
           local highlight = createHighlight()
           highlight.Adornee = character
           highlight.Parent = character
           character.Destroying:Once(function()
               highlight:Destroy()
           end)
       end

       local function onPlayerAdded(player)
           player.CharacterAdded:Connect(onCharacterAdded)
           if player.Character then
               onCharacterAdded(player.Character)
           end
       end

       if Value then
           Players.PlayerAdded:Connect(onPlayerAdded)
           for _, player in ipairs(Players:GetPlayers()) do
               onPlayerAdded(player)
           end
       else
           for _, player in ipairs(Players:GetPlayers()) do
               if player.Character then
                   local highlight = player.Character:FindFirstChildOfClass("Highlight")
                   if highlight then
                       highlight:Destroy()
                   end
               end
           end
       end
   end,
})

local AimSection = ESPTab:CreateSection("Aimbot")
local AimbotToggle = ESPTab:CreateToggle({
   Name = "Aimbot",
   CurrentValue = false,
   Flag = "AimbotToggle",
   Callback = function(Value)
      ENABLED = Value
   end,
})

PLAYER  = game.Players.LocalPlayer
MOUSE   = PLAYER:GetMouse()
CC      = game.Workspace.CurrentCamera

ENABLED      = false
ESP_ENABLED  = false

_G.FREE_FOR_ALL = true

_G.BIND        = 50
_G.ESP_BIND    = 52
_G.CHANGE_AIM  = 'q'

_G.AIM_AT = 'Head'

wait(1)

function GetNearestPlayerToMouse()
	local PLAYERS      = {}
	local PLAYER_HOLD  = {}
	local DISTANCES    = {}
	for i, v in pairs(game.Players:GetPlayers()) do
		if v ~= PLAYER then
			table.insert(PLAYERS, v)
		end
	end
	for i, v in pairs(PLAYERS) do
		if _G.FREE_FOR_ALL == false then
			if v and (v.Character) ~= nil and v.TeamColor ~= PLAYER.TeamColor then
				local AIM = v.Character:FindFirstChild(_G.AIM_AT)
				if AIM ~= nil then
					local DISTANCE                 = (AIM.Position - game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
					local RAY                      = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p, (MOUSE.Hit.p - CC.CoordinateFrame.p).unit * DISTANCE)
					local HIT,POS                  = game.Workspace:FindPartOnRay(RAY, game.Workspace)
					local DIFF                     = math.floor((POS - AIM.Position).magnitude)
					PLAYER_HOLD[v.Name .. i]       = {}
					PLAYER_HOLD[v.Name .. i].dist  = DISTANCE
					PLAYER_HOLD[v.Name .. i].plr   = v
					PLAYER_HOLD[v.Name .. i].diff  = DIFF
					table.insert(DISTANCES, DIFF)
				end
			end
		elseif _G.FREE_FOR_ALL == true then
			local AIM = v.Character:FindFirstChild(_G.AIM_AT)
			if AIM ~= nil then
				local DISTANCE                 = (AIM.Position - game.Workspace.CurrentCamera.CoordinateFrame.p).magnitude
				local RAY                      = Ray.new(game.Workspace.CurrentCamera.CoordinateFrame.p, (MOUSE.Hit.p - CC.CoordinateFrame.p).unit * DISTANCE)
				local HIT,POS                  = game.Workspace:FindPartOnRay(RAY, game.Workspace)
				local DIFF                     = math.floor((POS - AIM.Position).magnitude)
				PLAYER_HOLD[v.Name .. i]       = {}
				PLAYER_HOLD[v.Name .. i].dist  = DISTANCE
				PLAYER_HOLD[v.Name .. i].plr   = v
				PLAYER_HOLD[v.Name .. i].diff  = DIFF
				table.insert(DISTANCES, DIFF)
			end
		end
	end

	if unpack(DISTANCES) == nil then
		return false
	end

	local L_DISTANCE = math.floor(math.min(unpack(DISTANCES)))
	if L_DISTANCE > 20 then
		return false
	end

	for i, v in pairs(PLAYER_HOLD) do
		if v.diff == L_DISTANCE then
			return v.plr
		end
	end
	return false
end

local KnifeSection = ESPTab:CreateSection("Knife Aura")

local Toggle = ESPTab:CreateToggle({
    Name = "Knife Aura",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local toggleActive = Value

        local function getRandomPlayer()
            local playerList = {}
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    table.insert(playerList, player)
                end
            end
            if #playerList > 0 then
                return playerList[math.random(1, #playerList)]
            end
        end

        local function followTarget(target)
            while toggleActive and target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") do
                local char = LocalPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    char.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame * CFrame.new(0, 2, -2)
                end
                task.wait(0.5)  -- Use task.wait() instead of wait()
            end
        end

        local function teleportAndFollow()
            local target = getRandomPlayer()
            if target then
                followTarget(target)
            end
        end

        if toggleActive then
            task.spawn(function()
                while toggleActive do
                    teleportAndFollow()
                    task.wait(2)  -- Use task.wait() instead of wait()
                end
            end)
        end
    end,
})


local MiscTab = Window:CreateTab("Misc", nil)
local MiscSection = MiscTab:CreateSection("Walkspeed")

local Slider = MiscTab:CreateSlider({
    Name = "Walk Speed",
    Range = {0, 100},
    Increment = 1,
    Suffix = " Speed",
    CurrentValue = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed or 16,
    Flag = "WalkSpeedSlider",
    Callback = function(Value)
        local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value
        end
    end,
})

local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
if humanoid then
    Slider:Set(humanoid.WalkSpeed)
end
